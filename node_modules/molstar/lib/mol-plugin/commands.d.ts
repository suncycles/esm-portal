/**
 * Copyright (c) 2018-2023 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author David Sehnal <david.sehnal@gmail.com>
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @author Adam Midlik <midlik@gmail.com>
 */
import { Camera } from '../mol-canvas3d/camera';
import { PluginCommand } from './command';
import { StateTransform, State, StateAction } from '../mol-state';
import { Canvas3DProps } from '../mol-canvas3d/canvas3d';
import { PluginLayoutStateProps } from './layout';
import { Structure, StructureElement } from '../mol-model/structure';
import { PluginState } from './state';
import { PluginToast } from './util/toast';
import { Vec3 } from '../mol-math/linear-algebra';
export declare const PluginCommands: {
    State: {
        SetCurrentObject: PluginCommand<{
            state: State;
            ref: StateTransform.Ref;
        }>;
        ApplyAction: PluginCommand<{
            state: State;
            action: StateAction.Instance;
            ref?: string | undefined;
        }>;
        Update: PluginCommand<{
            state: State;
            tree: State.Tree | State.Builder;
            options?: Partial<State.UpdateOptions> | undefined;
        }>;
        RemoveObject: PluginCommand<{
            state: State;
            ref: StateTransform.Ref;
            removeParentGhosts?: boolean | undefined;
        }>;
        ToggleExpanded: PluginCommand<{
            state: State;
            ref: StateTransform.Ref;
        }>;
        ToggleVisibility: PluginCommand<{
            state: State;
            ref: StateTransform.Ref;
        }>;
        Snapshots: {
            Add: PluginCommand<{
                key?: string | undefined;
                name?: string | undefined;
                description?: string | undefined;
                params?: Partial<import("../mol-util/param-definition").ParamDefinition.Values<{
                    durationInMs: import("../mol-util/param-definition").ParamDefinition.Numeric;
                    data: import("../mol-util/param-definition").ParamDefinition.BooleanParam;
                    behavior: import("../mol-util/param-definition").ParamDefinition.BooleanParam;
                    structureSelection: import("../mol-util/param-definition").ParamDefinition.BooleanParam;
                    componentManager: import("../mol-util/param-definition").ParamDefinition.BooleanParam;
                    animation: import("../mol-util/param-definition").ParamDefinition.BooleanParam;
                    startAnimation: import("../mol-util/param-definition").ParamDefinition.BooleanParam;
                    canvas3d: import("../mol-util/param-definition").ParamDefinition.BooleanParam;
                    canvas3dContext: import("../mol-util/param-definition").ParamDefinition.BooleanParam;
                    interactivity: import("../mol-util/param-definition").ParamDefinition.BooleanParam;
                    camera: import("../mol-util/param-definition").ParamDefinition.BooleanParam;
                    cameraTransition: import("../mol-util/param-definition").ParamDefinition.Mapped<import("../mol-util/param-definition").ParamDefinition.NamedParams<import("../mol-util/param-definition").ParamDefinition.Normalize<{
                        durationInMs: number;
                    }>, "animate"> | import("../mol-util/param-definition").ParamDefinition.NamedParams<import("../mol-util/param-definition").ParamDefinition.Normalize<unknown>, "instant">>;
                    image: import("../mol-util/param-definition").ParamDefinition.BooleanParam;
                }>> | undefined;
            }>;
            Replace: PluginCommand<{
                id: string;
                params?: Partial<import("../mol-util/param-definition").ParamDefinition.Values<{
                    durationInMs: import("../mol-util/param-definition").ParamDefinition.Numeric;
                    data: import("../mol-util/param-definition").ParamDefinition.BooleanParam;
                    behavior: import("../mol-util/param-definition").ParamDefinition.BooleanParam;
                    structureSelection: import("../mol-util/param-definition").ParamDefinition.BooleanParam;
                    componentManager: import("../mol-util/param-definition").ParamDefinition.BooleanParam;
                    animation: import("../mol-util/param-definition").ParamDefinition.BooleanParam;
                    startAnimation: import("../mol-util/param-definition").ParamDefinition.BooleanParam;
                    canvas3d: import("../mol-util/param-definition").ParamDefinition.BooleanParam;
                    canvas3dContext: import("../mol-util/param-definition").ParamDefinition.BooleanParam;
                    interactivity: import("../mol-util/param-definition").ParamDefinition.BooleanParam;
                    camera: import("../mol-util/param-definition").ParamDefinition.BooleanParam;
                    cameraTransition: import("../mol-util/param-definition").ParamDefinition.Mapped<import("../mol-util/param-definition").ParamDefinition.NamedParams<import("../mol-util/param-definition").ParamDefinition.Normalize<{
                        durationInMs: number;
                    }>, "animate"> | import("../mol-util/param-definition").ParamDefinition.NamedParams<import("../mol-util/param-definition").ParamDefinition.Normalize<unknown>, "instant">>;
                    image: import("../mol-util/param-definition").ParamDefinition.BooleanParam;
                }>> | undefined;
            }>;
            Move: PluginCommand<{
                id: string;
                dir: -1 | 1;
            }>;
            Remove: PluginCommand<{
                id: string;
            }>;
            Apply: PluginCommand<{
                id: string;
            }>;
            Clear: PluginCommand<{}>;
            Upload: PluginCommand<{
                name?: string | undefined;
                description?: string | undefined;
                playOnLoad?: boolean | undefined;
                serverUrl: string;
                params?: Partial<import("../mol-util/param-definition").ParamDefinition.Values<{
                    durationInMs: import("../mol-util/param-definition").ParamDefinition.Numeric;
                    data: import("../mol-util/param-definition").ParamDefinition.BooleanParam;
                    behavior: import("../mol-util/param-definition").ParamDefinition.BooleanParam;
                    structureSelection: import("../mol-util/param-definition").ParamDefinition.BooleanParam;
                    componentManager: import("../mol-util/param-definition").ParamDefinition.BooleanParam;
                    animation: import("../mol-util/param-definition").ParamDefinition.BooleanParam;
                    startAnimation: import("../mol-util/param-definition").ParamDefinition.BooleanParam;
                    canvas3d: import("../mol-util/param-definition").ParamDefinition.BooleanParam;
                    canvas3dContext: import("../mol-util/param-definition").ParamDefinition.BooleanParam;
                    interactivity: import("../mol-util/param-definition").ParamDefinition.BooleanParam;
                    camera: import("../mol-util/param-definition").ParamDefinition.BooleanParam;
                    cameraTransition: import("../mol-util/param-definition").ParamDefinition.Mapped<import("../mol-util/param-definition").ParamDefinition.NamedParams<import("../mol-util/param-definition").ParamDefinition.Normalize<{
                        durationInMs: number;
                    }>, "animate"> | import("../mol-util/param-definition").ParamDefinition.NamedParams<import("../mol-util/param-definition").ParamDefinition.Normalize<unknown>, "instant">>;
                    image: import("../mol-util/param-definition").ParamDefinition.BooleanParam;
                }>> | undefined;
            }>;
            Fetch: PluginCommand<{
                url: string;
            }>;
            DownloadToFile: PluginCommand<{
                name?: string | undefined;
                type: PluginState.SnapshotType;
                params?: Partial<import("../mol-util/param-definition").ParamDefinition.Values<{
                    durationInMs: import("../mol-util/param-definition").ParamDefinition.Numeric;
                    data: import("../mol-util/param-definition").ParamDefinition.BooleanParam;
                    behavior: import("../mol-util/param-definition").ParamDefinition.BooleanParam;
                    structureSelection: import("../mol-util/param-definition").ParamDefinition.BooleanParam;
                    componentManager: import("../mol-util/param-definition").ParamDefinition.BooleanParam;
                    animation: import("../mol-util/param-definition").ParamDefinition.BooleanParam;
                    startAnimation: import("../mol-util/param-definition").ParamDefinition.BooleanParam;
                    canvas3d: import("../mol-util/param-definition").ParamDefinition.BooleanParam;
                    canvas3dContext: import("../mol-util/param-definition").ParamDefinition.BooleanParam;
                    interactivity: import("../mol-util/param-definition").ParamDefinition.BooleanParam;
                    camera: import("../mol-util/param-definition").ParamDefinition.BooleanParam;
                    cameraTransition: import("../mol-util/param-definition").ParamDefinition.Mapped<import("../mol-util/param-definition").ParamDefinition.NamedParams<import("../mol-util/param-definition").ParamDefinition.Normalize<{
                        durationInMs: number;
                    }>, "animate"> | import("../mol-util/param-definition").ParamDefinition.NamedParams<import("../mol-util/param-definition").ParamDefinition.Normalize<unknown>, "instant">>;
                    image: import("../mol-util/param-definition").ParamDefinition.BooleanParam;
                }>> | undefined;
            }>;
            OpenFile: PluginCommand<{
                file: File;
            }>;
            OpenUrl: PluginCommand<{
                url: string;
                type: PluginState.SnapshotType;
            }>;
        };
    };
    Interactivity: {
        Object: {
            Highlight: PluginCommand<{
                state: State;
                ref: StateTransform.Ref | StateTransform.Ref[];
            }>;
        };
        Structure: {
            Highlight: PluginCommand<{
                loci: StructureElement.Loci;
                isOff?: boolean | undefined;
            }>;
            Select: PluginCommand<{
                loci: StructureElement.Loci;
                isOff?: boolean | undefined;
            }>;
        };
        ClearHighlights: PluginCommand<{}>;
    };
    Layout: {
        Update: PluginCommand<{
            state: Partial<PluginLayoutStateProps>;
        }>;
    };
    Toast: {
        Show: PluginCommand<PluginToast>;
        Hide: PluginCommand<{
            key: string;
        }>;
    };
    Camera: {
        Reset: PluginCommand<{
            durationMs?: number | undefined;
            snapshot?: Partial<Camera.Snapshot> | undefined;
        }>;
        SetSnapshot: PluginCommand<{
            snapshot: Partial<Camera.Snapshot>;
            durationMs?: number | undefined;
        }>;
        Focus: PluginCommand<{
            center: Vec3;
            radius: number;
            durationMs?: number | undefined;
        }>;
        OrientAxes: PluginCommand<{
            structures?: Structure[] | undefined;
            durationMs?: number | undefined;
        }>;
        ResetAxes: PluginCommand<{
            durationMs?: number | undefined;
        }>;
    };
    Canvas3D: {
        SetSettings: PluginCommand<{
            settings: Partial<Canvas3DProps> | ((old: Canvas3DProps) => Partial<Canvas3DProps> | void);
        }>;
        ResetSettings: PluginCommand<{}>;
    };
};
