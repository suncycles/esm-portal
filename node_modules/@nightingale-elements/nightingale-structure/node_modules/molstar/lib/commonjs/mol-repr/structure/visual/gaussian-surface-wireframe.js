"use strict";
/**
 * Copyright (c) 2018-2022 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.GaussianWireframeVisual = exports.GaussianWireframeParams = void 0;
var tslib_1 = require("tslib");
var param_definition_1 = require("../../../mol-util/param-definition");
var lines_1 = require("../../../mol-geo/geometry/lines/lines");
var gaussian_1 = require("./util/gaussian");
var algorithm_1 = require("../../../mol-geo/util/marching-cubes/algorithm");
var units_visual_1 = require("../units-visual");
var element_1 = require("./util/element");
var geometry_1 = require("../../../mol-math/geometry");
function createGaussianWireframe(ctx, unit, structure, theme, props, lines) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var smoothness, _a, transform, field, idField, maxRadius, params, wireframe, sphere;
        return tslib_1.__generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    smoothness = props.smoothness;
                    return [4 /*yield*/, (0, gaussian_1.computeUnitGaussianDensity)(structure, unit, theme.size, props).runInContext(ctx.runtime)];
                case 1:
                    _a = _b.sent(), transform = _a.transform, field = _a.field, idField = _a.idField, maxRadius = _a.maxRadius;
                    params = {
                        isoLevel: Math.exp(-smoothness),
                        scalarField: field,
                        idField: idField
                    };
                    return [4 /*yield*/, (0, algorithm_1.computeMarchingCubesLines)(params, lines).runAsChild(ctx.runtime)];
                case 2:
                    wireframe = _b.sent();
                    lines_1.Lines.transform(wireframe, transform);
                    sphere = geometry_1.Sphere3D.expand((0, geometry_1.Sphere3D)(), unit.boundary.sphere, maxRadius);
                    wireframe.setBoundingSphere(sphere);
                    return [2 /*return*/, wireframe];
            }
        });
    });
}
exports.GaussianWireframeParams = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, units_visual_1.UnitsLinesParams), gaussian_1.GaussianDensityParams), { sizeFactor: param_definition_1.ParamDefinition.Numeric(3, { min: 0, max: 10, step: 0.1 }), lineSizeAttenuation: param_definition_1.ParamDefinition.Boolean(false), ignoreHydrogens: param_definition_1.ParamDefinition.Boolean(false), ignoreHydrogensVariant: param_definition_1.ParamDefinition.Select('all', param_definition_1.ParamDefinition.arrayToOptions(['all', 'non-polar'])), includeParent: param_definition_1.ParamDefinition.Boolean(false, { isHidden: true }) });
function GaussianWireframeVisual(materialId) {
    return (0, units_visual_1.UnitsLinesVisual)({
        defaultProps: param_definition_1.ParamDefinition.getDefaultValues(exports.GaussianWireframeParams),
        createGeometry: createGaussianWireframe,
        createLocationIterator: element_1.ElementIterator.fromGroup,
        getLoci: element_1.getElementLoci,
        eachLocation: element_1.eachElement,
        setUpdateState: function (state, newProps, currentProps) {
            if (newProps.resolution !== currentProps.resolution)
                state.createGeometry = true;
            if (newProps.radiusOffset !== currentProps.radiusOffset)
                state.createGeometry = true;
            if (newProps.smoothness !== currentProps.smoothness)
                state.createGeometry = true;
            if (newProps.ignoreHydrogens !== currentProps.ignoreHydrogens)
                state.createGeometry = true;
            if (newProps.ignoreHydrogensVariant !== currentProps.ignoreHydrogensVariant)
                state.createGeometry = true;
            if (newProps.traceOnly !== currentProps.traceOnly)
                state.createGeometry = true;
            if (newProps.includeParent !== currentProps.includeParent)
                state.createGeometry = true;
        }
    }, materialId);
}
exports.GaussianWireframeVisual = GaussianWireframeVisual;
