"use strict";
/**
 * Copyright (c) 2019-2022 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.EllipsoidRepresentationProvider = exports.EllipsoidRepresentation = exports.getEllipsoidParams = exports.EllipsoidParams = void 0;
var tslib_1 = require("tslib");
var param_definition_1 = require("../../../mol-util/param-definition");
var representation_1 = require("../../../mol-repr/representation");
var representation_2 = require("../../../mol-repr/structure/representation");
var ellipsoid_mesh_1 = require("../visual/ellipsoid-mesh");
var anisotropic_1 = require("../../../mol-model-formats/structure/property/anisotropic");
var bond_intra_unit_cylinder_1 = require("../visual/bond-intra-unit-cylinder");
var bond_inter_unit_cylinder_1 = require("../visual/bond-inter-unit-cylinder");
var params_1 = require("../params");
var base_1 = require("../../../mol-geo/geometry/base");
var EllipsoidVisuals = {
    'ellipsoid-mesh': function (ctx, getParams) { return (0, representation_2.UnitsRepresentation)('Ellipsoid Mesh', ctx, getParams, ellipsoid_mesh_1.EllipsoidMeshVisual); },
    'intra-bond': function (ctx, getParams) { return (0, representation_2.UnitsRepresentation)('Intra-unit bond cylinder', ctx, getParams, bond_intra_unit_cylinder_1.IntraUnitBondCylinderVisual); },
    'inter-bond': function (ctx, getParams) { return (0, representation_2.ComplexRepresentation)('Inter-unit bond cylinder', ctx, getParams, bond_inter_unit_cylinder_1.InterUnitBondCylinderVisual); },
};
exports.EllipsoidParams = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, ellipsoid_mesh_1.EllipsoidMeshParams), bond_intra_unit_cylinder_1.IntraUnitBondCylinderParams), bond_inter_unit_cylinder_1.InterUnitBondCylinderParams), { includeParent: param_definition_1.ParamDefinition.Boolean(false), adjustCylinderLength: param_definition_1.ParamDefinition.Boolean(false, { isHidden: true }), unitKinds: (0, params_1.getUnitKindsParam)(['atomic']), sizeFactor: param_definition_1.ParamDefinition.Numeric(1, { min: 0.01, max: 10, step: 0.01 }), sizeAspectRatio: param_definition_1.ParamDefinition.Numeric(0.1, { min: 0.01, max: 3, step: 0.01 }), linkCap: param_definition_1.ParamDefinition.Boolean(true), visuals: param_definition_1.ParamDefinition.MultiSelect(['ellipsoid-mesh', 'intra-bond', 'inter-bond'], param_definition_1.ParamDefinition.objectToOptions(EllipsoidVisuals)), bumpFrequency: param_definition_1.ParamDefinition.Numeric(0, { min: 0, max: 10, step: 0.1 }, base_1.BaseGeometry.ShadingCategory) });
function getEllipsoidParams(ctx, structure) {
    return exports.EllipsoidParams;
}
exports.getEllipsoidParams = getEllipsoidParams;
function EllipsoidRepresentation(ctx, getParams) {
    return representation_1.Representation.createMulti('Ellipsoid', ctx, getParams, representation_2.StructureRepresentationStateBuilder, EllipsoidVisuals);
}
exports.EllipsoidRepresentation = EllipsoidRepresentation;
exports.EllipsoidRepresentationProvider = (0, representation_2.StructureRepresentationProvider)({
    name: 'ellipsoid',
    label: 'Ellipsoid',
    description: 'Displays anisotropic displacement ellipsoids of atomic elements plus bonds as cylinders.',
    factory: EllipsoidRepresentation,
    getParams: getEllipsoidParams,
    defaultValues: param_definition_1.ParamDefinition.getDefaultValues(exports.EllipsoidParams),
    defaultColorTheme: { name: 'element-symbol' },
    defaultSizeTheme: { name: 'uniform' },
    isApplicable: function (structure) { return structure.elementCount > 0 && structure.models.some(function (m) { return anisotropic_1.AtomSiteAnisotrop.Provider.isApplicable(m); }); },
    getData: function (structure, props) {
        return props.includeParent ? structure.asParent() : structure;
    },
    mustRecreate: function (oldProps, newProps) {
        return oldProps.includeParent !== newProps.includeParent;
    }
});
