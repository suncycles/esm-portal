"use strict";
/**
 * Copyright (c) 2018-2022 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CarbohydrateLinkVisual = exports.CarbohydrateLinkParams = void 0;
var tslib_1 = require("tslib");
var structure_1 = require("../../../mol-model/structure");
var loci_1 = require("../../../mol-model/loci");
var linear_algebra_1 = require("../../../mol-math/linear-algebra");
var link_1 = require("./util/link");
var int_1 = require("../../../mol-data/int");
var complex_visual_1 = require("../complex-visual");
var units_visual_1 = require("../units-visual");
var param_definition_1 = require("../../../mol-util/param-definition");
var location_iterator_1 = require("../../../mol-geo/util/location-iterator");
var common_1 = require("./util/common");
var geometry_1 = require("../../../mol-math/geometry");
function createCarbohydrateLinkCylinderMesh(ctx, structure, theme, props, mesh) {
    var _a = structure.carbohydrates, links = _a.links, elements = _a.elements;
    var linkSizeFactor = props.linkSizeFactor;
    var location = structure_1.StructureElement.Location.create(structure);
    var builderProps = {
        linkCount: links.length,
        position: function (posA, posB, edgeIndex) {
            var l = links[edgeIndex];
            linear_algebra_1.Vec3.copy(posA, elements[l.carbohydrateIndexA].geometry.center);
            linear_algebra_1.Vec3.copy(posB, elements[l.carbohydrateIndexB].geometry.center);
        },
        radius: function (edgeIndex) {
            var l = links[edgeIndex];
            var carbA = elements[l.carbohydrateIndexA];
            var ringA = carbA.unit.rings.all[carbA.ringIndex];
            location.unit = carbA.unit;
            location.element = carbA.unit.elements[ringA[0]];
            return theme.size.size(location) * linkSizeFactor;
        },
    };
    var _b = (0, link_1.createLinkCylinderMesh)(ctx, builderProps, props, mesh), m = _b.mesh, boundingSphere = _b.boundingSphere;
    if (boundingSphere) {
        m.setBoundingSphere(boundingSphere);
    }
    else if (m.triangleCount > 0) {
        var sphere = geometry_1.Sphere3D.expand((0, geometry_1.Sphere3D)(), structure.boundary.sphere, 1 * linkSizeFactor);
        m.setBoundingSphere(sphere);
    }
    return m;
}
exports.CarbohydrateLinkParams = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, units_visual_1.UnitsMeshParams), link_1.LinkCylinderParams), { linkSizeFactor: param_definition_1.ParamDefinition.Numeric(0.3, { min: 0, max: 3, step: 0.01 }) });
function CarbohydrateLinkVisual(materialId) {
    return (0, complex_visual_1.ComplexMeshVisual)({
        defaultProps: param_definition_1.ParamDefinition.getDefaultValues(exports.CarbohydrateLinkParams),
        createGeometry: createCarbohydrateLinkCylinderMesh,
        createLocationIterator: CarbohydrateLinkIterator,
        getLoci: getLinkLoci,
        eachLocation: eachCarbohydrateLink,
        setUpdateState: function (state, newProps, currentProps) {
            state.createGeometry = (newProps.linkSizeFactor !== currentProps.linkSizeFactor ||
                newProps.radialSegments !== currentProps.radialSegments ||
                newProps.linkCap !== currentProps.linkCap);
        }
    }, materialId);
}
exports.CarbohydrateLinkVisual = CarbohydrateLinkVisual;
function CarbohydrateLinkIterator(structure) {
    var _a = structure.carbohydrates, elements = _a.elements, links = _a.links;
    var groupCount = links.length;
    var instanceCount = 1;
    var location = structure_1.StructureElement.Location.create(structure);
    var getLocation = function (groupIndex) {
        var link = links[groupIndex];
        var carbA = elements[link.carbohydrateIndexA];
        var ringA = carbA.unit.rings.all[carbA.ringIndex];
        location.unit = carbA.unit;
        location.element = carbA.unit.elements[ringA[0]];
        return location;
    };
    return (0, location_iterator_1.LocationIterator)(groupCount, instanceCount, 1, getLocation, true);
}
function getLinkLoci(pickingId, structure, id) {
    var objectId = pickingId.objectId, groupId = pickingId.groupId;
    if (id === objectId) {
        var _a = structure.carbohydrates, links = _a.links, elements = _a.elements;
        var l = links[groupId];
        var carbA = elements[l.carbohydrateIndexA];
        var carbB = elements[l.carbohydrateIndexB];
        return structure_1.StructureElement.Loci.union((0, common_1.getAltResidueLociFromId)(structure, carbA.unit, carbA.residueIndex, carbA.altId), (0, common_1.getAltResidueLociFromId)(structure, carbB.unit, carbB.residueIndex, carbB.altId));
    }
    return loci_1.EmptyLoci;
}
var __linkIndicesSet = new Set();
function eachCarbohydrateLink(loci, structure, apply) {
    var changed = false;
    if (!structure_1.StructureElement.Loci.is(loci))
        return false;
    if (!structure_1.Structure.areEquivalent(loci.structure, structure))
        return false;
    var getLinkIndices = structure.carbohydrates.getLinkIndices;
    var _loop_1 = function (unit, indices) {
        if (!structure_1.Unit.isAtomic(unit))
            return "continue";
        __linkIndicesSet.clear();
        int_1.OrderedSet.forEach(indices, function (v) {
            var linkIndices = getLinkIndices(unit, unit.elements[v]);
            for (var i = 0, il = linkIndices.length; i < il; ++i) {
                if (!__linkIndicesSet.has(linkIndices[i])) {
                    __linkIndicesSet.add(linkIndices[i]);
                    if (apply(int_1.Interval.ofSingleton(linkIndices[i])))
                        changed = true;
                }
            }
        });
    };
    for (var _i = 0, _a = loci.elements; _i < _a.length; _i++) {
        var _b = _a[_i], unit = _b.unit, indices = _b.indices;
        _loop_1(unit, indices);
    }
    return changed;
}
