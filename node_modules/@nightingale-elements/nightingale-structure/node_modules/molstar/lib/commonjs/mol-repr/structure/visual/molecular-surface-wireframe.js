"use strict";
/**
 * Copyright (c) 2019-2022 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MolecularSurfaceWireframeVisual = exports.MolecularSurfaceWireframeParams = void 0;
var tslib_1 = require("tslib");
var param_definition_1 = require("../../../mol-util/param-definition");
var units_visual_1 = require("../units-visual");
var molecular_surface_1 = require("../../../mol-math/geometry/molecular-surface");
var lines_1 = require("../../../mol-geo/geometry/lines/lines");
var molecular_surface_2 = require("./util/molecular-surface");
var algorithm_1 = require("../../../mol-geo/util/marching-cubes/algorithm");
var element_1 = require("./util/element");
var common_1 = require("./util/common");
var geometry_1 = require("../../../mol-math/geometry");
exports.MolecularSurfaceWireframeParams = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, units_visual_1.UnitsLinesParams), molecular_surface_1.MolecularSurfaceCalculationParams), common_1.CommonSurfaceParams), { sizeFactor: param_definition_1.ParamDefinition.Numeric(1.5, { min: 0, max: 10, step: 0.1 }) });
//
function createMolecularSurfaceWireframe(ctx, unit, structure, theme, props, lines) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var _a, transform, field, idField, maxRadius, params, wireframe, sphere;
        return tslib_1.__generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, (0, molecular_surface_2.computeUnitMolecularSurface)(structure, unit, theme.size, props).runInContext(ctx.runtime)];
                case 1:
                    _a = _b.sent(), transform = _a.transform, field = _a.field, idField = _a.idField, maxRadius = _a.maxRadius;
                    params = {
                        isoLevel: props.probeRadius,
                        scalarField: field,
                        idField: idField
                    };
                    return [4 /*yield*/, (0, algorithm_1.computeMarchingCubesLines)(params, lines).runAsChild(ctx.runtime)];
                case 2:
                    wireframe = _b.sent();
                    lines_1.Lines.transform(wireframe, transform);
                    sphere = geometry_1.Sphere3D.expand((0, geometry_1.Sphere3D)(), unit.boundary.sphere, maxRadius);
                    wireframe.setBoundingSphere(sphere);
                    return [2 /*return*/, wireframe];
            }
        });
    });
}
function MolecularSurfaceWireframeVisual(materialId) {
    return (0, units_visual_1.UnitsLinesVisual)({
        defaultProps: param_definition_1.ParamDefinition.getDefaultValues(exports.MolecularSurfaceWireframeParams),
        createGeometry: createMolecularSurfaceWireframe,
        createLocationIterator: element_1.ElementIterator.fromGroup,
        getLoci: element_1.getElementLoci,
        eachLocation: element_1.eachElement,
        setUpdateState: function (state, newProps, currentProps) {
            if (newProps.resolution !== currentProps.resolution)
                state.createGeometry = true;
            if (newProps.probeRadius !== currentProps.probeRadius)
                state.createGeometry = true;
            if (newProps.probePositions !== currentProps.probePositions)
                state.createGeometry = true;
            if (newProps.ignoreHydrogens !== currentProps.ignoreHydrogens)
                state.createGeometry = true;
            if (newProps.ignoreHydrogensVariant !== currentProps.ignoreHydrogensVariant)
                state.createGeometry = true;
            if (newProps.includeParent !== currentProps.includeParent)
                state.createGeometry = true;
        }
    }, materialId);
}
exports.MolecularSurfaceWireframeVisual = MolecularSurfaceWireframeVisual;
