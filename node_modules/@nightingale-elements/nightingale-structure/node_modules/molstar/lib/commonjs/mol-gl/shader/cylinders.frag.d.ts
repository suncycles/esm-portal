/**
 * Copyright (c) 2020-2022 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
export declare const cylinders_frag = "\nprecision highp float;\nprecision highp int;\n\n#define bumpEnabled\n\nuniform mat4 uView;\n\nvarying mat4 vTransform;\nvarying vec3 vStart;\nvarying vec3 vEnd;\nvarying float vSize;\nvarying float vCap;\n\nuniform vec3 uCameraDir;\nuniform vec3 uCameraPosition;\nuniform mat4 uInvView;\n\n#include common\n#include common_frag_params\n#include color_frag_params\n#include light_frag_params\n#include common_clip\n\n#ifdef dSolidInterior\n    const bool solidInterior = true;\n#else\n    const bool solidInterior = false;\n#endif\n\n// adapted from https://www.shadertoy.com/view/4lcSRn\n// The MIT License, Copyright 2016 Inigo Quilez\nbool CylinderImpostor(\n    in vec3 rayOrigin, in vec3 rayDir,\n    in vec3 start, in vec3 end, in float radius,\n    out vec3 cameraNormal, out bool interior,\n    out vec3 modelPosition, out vec3 viewPosition, out float fragmentDepth\n){\n    vec3 ba = end - start;\n    vec3 oc = rayOrigin - start;\n\n    float baba = dot(ba, ba);\n    float bard = dot(ba, rayDir);\n    float baoc = dot(ba, oc);\n\n    float k2 = baba - bard * bard;\n    float k1 = baba * dot(oc, rayDir) - baoc * bard;\n    float k0 = baba * dot(oc, oc) - baoc * baoc - radius * radius * baba;\n\n    float h = k1 * k1 - k2 * k0;\n    if (h < 0.0) return false;\n\n    bool topCap = (vCap > 0.9 && vCap < 1.1) || vCap >= 2.9;\n    bool bottomCap = (vCap > 1.9 && vCap < 2.1) || vCap >= 2.9;\n\n    #ifdef dSolidInterior\n        bool topInterior = !topCap;\n        bool bottomInterior = !bottomCap;\n        topCap = true;\n        bottomCap = true;\n    #else\n        bool topInterior = false;\n        bool bottomInterior = false;\n    #endif\n\n    bool clipped = false;\n    bool objectClipped = false;\n\n    // body outside\n    h = sqrt(h);\n    float t = (-k1 - h) / k2;\n    float y = baoc + t * bard;\n    if (y > 0.0 && y < baba) {\n        interior = false;\n        cameraNormal = (oc + t * rayDir - ba * y / baba) / radius;\n        modelPosition = rayOrigin + t * rayDir;\n        viewPosition = (uView * vec4(modelPosition, 1.0)).xyz;\n        fragmentDepth = calcDepth(viewPosition);\n        #if defined(dClipVariant_pixel) && dClipObjectCount != 0\n            if (clipTest(vec4(modelPosition, 0.0))) {\n                objectClipped = true;\n                fragmentDepth = -1.0;\n                #ifdef dSolidInterior\n                    topCap = !topInterior;\n                    bottomCap = !bottomInterior;\n                #endif\n            }\n        #endif\n        if (fragmentDepth > 0.0) return true;\n        clipped = true;\n    }\n\n    if (!clipped) {\n        if (topCap && y < 0.0) {\n            // top cap\n            t = -baoc / bard;\n            if (abs(k1 + k2 * t) < h) {\n                interior = topInterior;\n                cameraNormal = -ba / baba;\n                modelPosition = rayOrigin + t * rayDir;\n                viewPosition = (uView * vec4(modelPosition, 1.0)).xyz;\n                fragmentDepth = calcDepth(viewPosition);\n                #if defined(dClipVariant_pixel) && dClipObjectCount != 0\n                    if (clipTest(vec4(modelPosition, 0.0))) {\n                        objectClipped = true;\n                        fragmentDepth = -1.0;\n                        #ifdef dSolidInterior\n                            topCap = !topInterior;\n                            bottomCap = !bottomInterior;\n                        #endif\n                    }\n                #endif\n                if (fragmentDepth > 0.0) {\n                    #ifdef dSolidInterior\n                        if (interior) cameraNormal = -rayDir;\n                    #endif\n                    return true;\n                }\n            }\n        } else if (bottomCap && y >= 0.0) {\n            // bottom cap\n            t = (baba - baoc) / bard;\n            if (abs(k1 + k2 * t) < h) {\n                interior = bottomInterior;\n                cameraNormal = ba / baba;\n                modelPosition = rayOrigin + t * rayDir;\n                viewPosition = (uView * vec4(modelPosition, 1.0)).xyz;\n                fragmentDepth = calcDepth(viewPosition);\n                #if defined(dClipVariant_pixel) && dClipObjectCount != 0\n                    if (clipTest(vec4(modelPosition, 0.0))) {\n                        objectClipped = true;\n                        fragmentDepth = -1.0;\n                        #ifdef dSolidInterior\n                            topCap = !topInterior;\n                            bottomCap = !bottomInterior;\n                        #endif\n                    }\n                #endif\n                if (fragmentDepth > 0.0) {\n                    #ifdef dSolidInterior\n                        if (interior) cameraNormal = -rayDir;\n                    #endif\n                    return true;\n                }\n            }\n        }\n    }\n\n    if (uDoubleSided || solidInterior) {\n        // body inside\n        h = -h;\n        t = (-k1 - h) / k2;\n        y = baoc + t * bard;\n        if (y > 0.0 && y < baba) {\n            interior = true;\n            cameraNormal = -(oc + t * rayDir - ba * y / baba) / radius;\n            modelPosition = rayOrigin + t * rayDir;\n            viewPosition = (uView * vec4(modelPosition, 1.0)).xyz;\n            fragmentDepth = calcDepth(viewPosition);\n            if (fragmentDepth > 0.0) {\n                #ifdef dSolidInterior\n                    if (!objectClipped) {\n                        fragmentDepth = 0.0 + (0.0000002 / vSize);\n                        cameraNormal = -rayDir;\n                    }\n                #endif\n                return true;\n            }\n        }\n\n        if (topCap && y < 0.0) {\n            // top cap\n            t = -baoc / bard;\n            if (abs(k1 + k2 * t) < -h) {\n                interior = true;\n                cameraNormal = ba / baba;\n                modelPosition = rayOrigin + t * rayDir;\n                viewPosition = (uView * vec4(modelPosition, 1.0)).xyz;\n                fragmentDepth = calcDepth(viewPosition);\n                if (fragmentDepth > 0.0) {\n                    #ifdef dSolidInterior\n                        if (!objectClipped) {\n                            fragmentDepth = 0.0 + (0.0000002 / vSize);\n                            cameraNormal = -rayDir;\n                        }\n                    #endif\n                    return true;\n                }\n            }\n        } else if (bottomCap && y >= 0.0) {\n            // bottom cap\n            t = (baba - baoc) / bard;\n            if (abs(k1 + k2 * t) < -h) {\n                interior = true;\n                cameraNormal = -ba / baba;\n                modelPosition = rayOrigin + t * rayDir;\n                viewPosition = (uView * vec4(modelPosition, 1.0)).xyz;\n                fragmentDepth = calcDepth(viewPosition);\n                if (fragmentDepth > 0.0) {\n                    #ifdef dSolidInterior\n                        if (!objectClipped) {\n                            fragmentDepth = 0.0 + (0.0000002 / vSize);\n                            cameraNormal = -rayDir;\n                        }\n                    #endif\n                    return true;\n                }\n            }\n        }\n    }\n\n    return false;\n}\n\nvoid main() {\n    vec3 rayOrigin = vModelPosition;\n    vec3 rayDir = mix(normalize(vModelPosition - uCameraPosition), uCameraDir, uIsOrtho);\n\n    vec3 cameraNormal;\n    vec3 modelPosition;\n    vec3 viewPosition;\n    float fragmentDepth;\n    bool hit = CylinderImpostor(rayOrigin, rayDir, vStart, vEnd, vSize, cameraNormal, interior, modelPosition, viewPosition, fragmentDepth);\n    if (!hit) discard;\n\n    if (fragmentDepth < 0.0) discard;\n    if (fragmentDepth > 1.0) discard;\n\n    gl_FragDepthEXT = fragmentDepth;\n\n    vec3 vViewPosition = viewPosition;\n    vec3 vModelPosition = modelPosition;\n\n    #include clip_pixel\n    #include assign_material_color\n\n    #if defined(dRenderVariant_pick)\n        #include check_picking_alpha\n        #ifdef requiredDrawBuffers\n            gl_FragColor = vObject;\n            gl_FragData[1] = vInstance;\n            gl_FragData[2] = vGroup;\n            gl_FragData[3] = packDepthToRGBA(fragmentDepth);\n        #else\n            gl_FragColor = vColor;\n        #endif\n    #elif defined(dRenderVariant_depth)\n        gl_FragColor = material;\n    #elif defined(dRenderVariant_marking)\n        gl_FragColor = material;\n    #elif defined(dRenderVariant_color)\n        mat3 normalMatrix = transpose3(inverse3(mat3(uView)));\n        vec3 normal = normalize(normalMatrix * -normalize(cameraNormal));\n        #include apply_light_color\n\n        #include apply_interior_color\n        #include apply_marker_color\n        #include apply_fog\n        #include wboit_write\n        #include dpoit_write\n    #endif\n}\n";
