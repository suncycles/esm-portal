"use strict";
/**
 * Copyright (c) 2020-2023 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Image = exports.InterpolationTypeNames = exports.InterpolationTypes = void 0;
var tslib_1 = require("tslib");
var util_1 = require("../../../mol-data/util");
var location_iterator_1 = require("../../../mol-geo/util/location-iterator");
var util_2 = require("../../../mol-gl/renderable/util");
var geometry_1 = require("../../../mol-math/geometry");
var linear_algebra_1 = require("../../../mol-math/linear-algebra");
var mol_util_1 = require("../../../mol-util");
var param_definition_1 = require("../../../mol-util/param-definition");
var base_1 = require("../base");
var color_data_1 = require("../color-data");
var marker_data_1 = require("../marker-data");
var overpaint_data_1 = require("../overpaint-data");
var transparency_data_1 = require("../transparency-data");
var array_1 = require("../../../mol-util/array");
var clipping_data_1 = require("../clipping-data");
var location_1 = require("../../../mol-model/location");
var util_3 = require("../../../mol-gl/compute/util");
var substance_data_1 = require("../substance-data");
var QuadIndices = new Uint32Array([
    0, 1, 2,
    1, 3, 2
]);
var QuadUvs = new Float32Array([
    0, 1,
    0, 0,
    1, 1,
    1, 0
]);
exports.InterpolationTypes = {
    'nearest': 'Nearest',
    'catmulrom': 'Catmulrom (Cubic)',
    'mitchell': 'Mitchell (Cubic)',
    'bspline': 'B-Spline (Cubic)'
};
exports.InterpolationTypeNames = Object.keys(exports.InterpolationTypes);
var Image;
(function (Image) {
    function create(imageTexture, corners, groupTexture, image) {
        return image ?
            update(imageTexture, corners, groupTexture, image) :
            fromData(imageTexture, corners, groupTexture);
    }
    Image.create = create;
    function hashCode(image) {
        return (0, util_1.hashFnv32a)([
            image.cornerBuffer.ref.version
        ]);
    }
    function fromData(imageTexture, corners, groupTexture) {
        var boundingSphere = (0, geometry_1.Sphere3D)();
        var currentHash = -1;
        var width = imageTexture.width;
        var height = imageTexture.height;
        var image = {
            kind: 'image',
            imageTexture: mol_util_1.ValueCell.create(imageTexture),
            imageTextureDim: mol_util_1.ValueCell.create(linear_algebra_1.Vec2.create(width, height)),
            cornerBuffer: mol_util_1.ValueCell.create(corners),
            groupTexture: mol_util_1.ValueCell.create(groupTexture),
            get boundingSphere() {
                var newHash = hashCode(image);
                if (newHash !== currentHash) {
                    var b = getBoundingSphere(image.cornerBuffer.ref.value);
                    geometry_1.Sphere3D.copy(boundingSphere, b);
                    currentHash = newHash;
                }
                return boundingSphere;
            },
        };
        return image;
    }
    function update(imageTexture, corners, groupTexture, image) {
        var width = imageTexture.width;
        var height = imageTexture.height;
        mol_util_1.ValueCell.update(image.imageTexture, imageTexture);
        mol_util_1.ValueCell.update(image.imageTextureDim, linear_algebra_1.Vec2.set(image.imageTextureDim.ref.value, width, height));
        mol_util_1.ValueCell.update(image.cornerBuffer, corners);
        mol_util_1.ValueCell.update(image.groupTexture, groupTexture);
        return image;
    }
    function createEmpty(image) {
        var imageTexture = (0, util_2.createTextureImage)(0, 4, Uint8Array);
        var corners = image ? image.cornerBuffer.ref.value : new Float32Array(8 * 3);
        var groupTexture = (0, util_2.createTextureImage)(0, 4, Uint8Array);
        return create(imageTexture, corners, groupTexture, image);
    }
    Image.createEmpty = createEmpty;
    Image.Params = tslib_1.__assign(tslib_1.__assign({}, base_1.BaseGeometry.Params), { interpolation: param_definition_1.ParamDefinition.Select('bspline', param_definition_1.ParamDefinition.objectToOptions(exports.InterpolationTypes)) });
    Image.Utils = {
        Params: Image.Params,
        createEmpty: createEmpty,
        createValues: createValues,
        createValuesSimple: createValuesSimple,
        updateValues: updateValues,
        updateBoundingSphere: updateBoundingSphere,
        createRenderableState: createRenderableState,
        updateRenderableState: updateRenderableState,
        createPositionIterator: function () { return (0, location_iterator_1.LocationIterator)(1, 1, 1, function () { return location_1.NullLocation; }); }
    };
    function createValues(image, transform, locationIt, theme, props) {
        var instanceCount = locationIt.instanceCount, groupCount = locationIt.groupCount;
        var positionIt = Image.Utils.createPositionIterator(image, transform);
        var color = (0, color_data_1.createColors)(locationIt, positionIt, theme.color);
        var marker = props.instanceGranularity
            ? (0, marker_data_1.createMarkers)(instanceCount, 'instance')
            : (0, marker_data_1.createMarkers)(instanceCount * groupCount, 'groupInstance');
        var overpaint = (0, overpaint_data_1.createEmptyOverpaint)();
        var transparency = (0, transparency_data_1.createEmptyTransparency)();
        var material = (0, substance_data_1.createEmptySubstance)();
        var clipping = (0, clipping_data_1.createEmptyClipping)();
        var counts = { drawCount: QuadIndices.length, vertexCount: util_3.QuadPositions.length / 3, groupCount: groupCount, instanceCount: instanceCount };
        var invariantBoundingSphere = geometry_1.Sphere3D.clone(image.boundingSphere);
        var boundingSphere = (0, util_2.calculateTransformBoundingSphere)(invariantBoundingSphere, transform.aTransform.ref.value, instanceCount, 0);
        return tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ dGeometryType: mol_util_1.ValueCell.create('image') }, color), marker), overpaint), transparency), material), clipping), transform), base_1.BaseGeometry.createValues(props, counts)), { aPosition: image.cornerBuffer, aUv: mol_util_1.ValueCell.create(QuadUvs), elements: mol_util_1.ValueCell.create(QuadIndices), 
            // aGroup is used as a vertex index here, group id is in tGroupTex
            aGroup: mol_util_1.ValueCell.create((0, array_1.fillSerial)(new Float32Array(4))), boundingSphere: mol_util_1.ValueCell.create(boundingSphere), invariantBoundingSphere: mol_util_1.ValueCell.create(invariantBoundingSphere), uInvariantBoundingSphere: mol_util_1.ValueCell.create(linear_algebra_1.Vec4.ofSphere(invariantBoundingSphere)), dInterpolation: mol_util_1.ValueCell.create(props.interpolation), uImageTexDim: image.imageTextureDim, tImageTex: image.imageTexture, tGroupTex: image.groupTexture });
    }
    function createValuesSimple(image, props, colorValue, sizeValue, transform) {
        var s = base_1.BaseGeometry.createSimple(colorValue, sizeValue, transform);
        var p = tslib_1.__assign(tslib_1.__assign({}, param_definition_1.ParamDefinition.getDefaultValues(Image.Params)), props);
        return createValues(image, s.transform, s.locationIterator, s.theme, p);
    }
    function updateValues(values, props) {
        base_1.BaseGeometry.updateValues(values, props);
        mol_util_1.ValueCell.updateIfChanged(values.dInterpolation, props.interpolation);
    }
    function updateBoundingSphere(values, image) {
        var invariantBoundingSphere = geometry_1.Sphere3D.clone(image.boundingSphere);
        var boundingSphere = (0, util_2.calculateTransformBoundingSphere)(invariantBoundingSphere, values.aTransform.ref.value, values.instanceCount.ref.value, 0);
        if (!geometry_1.Sphere3D.equals(boundingSphere, values.boundingSphere.ref.value)) {
            mol_util_1.ValueCell.update(values.boundingSphere, boundingSphere);
        }
        if (!geometry_1.Sphere3D.equals(invariantBoundingSphere, values.invariantBoundingSphere.ref.value)) {
            mol_util_1.ValueCell.update(values.invariantBoundingSphere, invariantBoundingSphere);
            mol_util_1.ValueCell.update(values.uInvariantBoundingSphere, linear_algebra_1.Vec4.fromSphere(values.uInvariantBoundingSphere.ref.value, invariantBoundingSphere));
        }
    }
    function createRenderableState(props) {
        var state = base_1.BaseGeometry.createRenderableState(props);
        state.opaque = false;
        return state;
    }
    function updateRenderableState(state, props) {
        base_1.BaseGeometry.updateRenderableState(state, props);
        state.opaque = false;
    }
})(Image || (Image = {}));
exports.Image = Image;
//
function getBoundingSphere(corners) {
    var center = (0, linear_algebra_1.Vec3)();
    var extrema = [];
    for (var i = 0, il = corners.length; i < il; i += 3) {
        var e = linear_algebra_1.Vec3.fromArray((0, linear_algebra_1.Vec3)(), corners, i);
        extrema.push(e);
        linear_algebra_1.Vec3.add(center, center, e);
    }
    linear_algebra_1.Vec3.scale(center, center, 1 / (corners.length / 3));
    var radius = 0;
    for (var _i = 0, extrema_1 = extrema; _i < extrema_1.length; _i++) {
        var e = extrema_1[_i];
        var d = linear_algebra_1.Vec3.distance(center, e);
        if (d > radius)
            radius = d;
    }
    var sphere = geometry_1.Sphere3D.create(center, radius);
    geometry_1.Sphere3D.setExtrema(sphere, extrema);
    return sphere;
}
