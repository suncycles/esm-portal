"use strict";
/**
 * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.OccupancyColorThemeProvider = exports.OccupancyColorTheme = exports.getOccupancy = exports.getOccupancyColorThemeParams = exports.OccupancyColorThemeParams = void 0;
var color_1 = require("../../mol-util/color");
var structure_1 = require("../../mol-model/structure");
var param_definition_1 = require("../../mol-util/param-definition");
var categories_1 = require("./categories");
var DefaultOccupancyColor = (0, color_1.Color)(0xCCCCCC);
var Description = "Assigns a color based on the occupancy of an atom.";
exports.OccupancyColorThemeParams = {
    domain: param_definition_1.ParamDefinition.Interval([0, 1]),
    list: param_definition_1.ParamDefinition.ColorList('purples', { presetKind: 'scale' }),
};
function getOccupancyColorThemeParams(ctx) {
    return exports.OccupancyColorThemeParams; // TODO return copy
}
exports.getOccupancyColorThemeParams = getOccupancyColorThemeParams;
function getOccupancy(unit, element) {
    if (structure_1.Unit.isAtomic(unit)) {
        return unit.model.atomicConformation.occupancy.value(element);
    }
    else {
        return 0;
    }
}
exports.getOccupancy = getOccupancy;
function OccupancyColorTheme(ctx, props) {
    var scale = color_1.ColorScale.create({
        reverse: false,
        domain: props.domain,
        listOrName: props.list.colors,
    });
    function color(location) {
        if (structure_1.StructureElement.Location.is(location)) {
            return scale.color(getOccupancy(location.unit, location.element));
        }
        else if (structure_1.Bond.isLocation(location)) {
            return scale.color(getOccupancy(location.aUnit, location.aUnit.elements[location.aIndex]));
        }
        return DefaultOccupancyColor;
    }
    return {
        factory: OccupancyColorTheme,
        granularity: 'group',
        preferSmoothing: true,
        color: color,
        props: props,
        description: Description,
        legend: scale ? scale.legend : undefined
    };
}
exports.OccupancyColorTheme = OccupancyColorTheme;
exports.OccupancyColorThemeProvider = {
    name: 'occupancy',
    label: 'Occupancy',
    category: categories_1.ColorThemeCategory.Atom,
    factory: OccupancyColorTheme,
    getParams: getOccupancyColorThemeParams,
    defaultValues: param_definition_1.ParamDefinition.getDefaultValues(exports.OccupancyColorThemeParams),
    isApplicable: function (ctx) { return !!ctx.structure && ctx.structure.models.some(function (m) { return m.atomicConformation.occupancy.isDefined; }); }
};
