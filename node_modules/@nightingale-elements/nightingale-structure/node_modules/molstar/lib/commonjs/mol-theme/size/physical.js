"use strict";
/**
 * Copyright (c) 2018 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PhysicalSizeThemeProvider = exports.PhysicalSizeTheme = exports.getPhysicalRadius = exports.getPhysicalSizeThemeParams = exports.PhysicalSizeThemeParams = void 0;
var structure_1 = require("../../mol-model/structure");
var atomic_1 = require("../../mol-model/structure/model/properties/atomic");
var param_definition_1 = require("../../mol-util/param-definition");
var DefaultSize = 1;
var Description = 'Assigns a physical size, i.e. vdW radius for atoms or given radius for coarse spheres.';
exports.PhysicalSizeThemeParams = {
    scale: param_definition_1.ParamDefinition.Numeric(1, { min: 0.1, max: 5, step: 0.1 })
};
function getPhysicalSizeThemeParams(ctx) {
    return exports.PhysicalSizeThemeParams; // TODO return copy
}
exports.getPhysicalSizeThemeParams = getPhysicalSizeThemeParams;
function getPhysicalRadius(unit, element) {
    if (structure_1.Unit.isAtomic(unit)) {
        return (0, atomic_1.VdwRadius)(unit.model.atomicHierarchy.atoms.type_symbol.value(element));
    }
    else if (structure_1.Unit.isSpheres(unit)) {
        return unit.model.coarseConformation.spheres.radius[element];
    }
    else {
        return 0;
    }
}
exports.getPhysicalRadius = getPhysicalRadius;
/**
 * Create attribute data with the physical size of an element,
 * i.e. vdw for atoms and radius for coarse spheres
 */
function PhysicalSizeTheme(ctx, props) {
    var scale = props.scale === void 0 ? 1 : props.scale;
    function size(location) {
        var size;
        if (structure_1.StructureElement.Location.is(location)) {
            size = scale * getPhysicalRadius(location.unit, location.element);
        }
        else if (structure_1.Bond.isLocation(location)) {
            size = scale * Math.min(getPhysicalRadius(location.aUnit, location.aUnit.elements[location.aIndex]), getPhysicalRadius(location.bUnit, location.bUnit.elements[location.bIndex]));
        }
        else {
            size = scale * DefaultSize;
        }
        return size;
    }
    return {
        factory: PhysicalSizeTheme,
        granularity: 'group',
        size: size,
        props: props,
        description: Description
    };
}
exports.PhysicalSizeTheme = PhysicalSizeTheme;
exports.PhysicalSizeThemeProvider = {
    name: 'physical',
    label: 'Physical',
    category: '',
    factory: PhysicalSizeTheme,
    getParams: getPhysicalSizeThemeParams,
    defaultValues: param_definition_1.ParamDefinition.getDefaultValues(exports.PhysicalSizeThemeParams),
    isApplicable: function (ctx) { return !!ctx.structure; }
};
