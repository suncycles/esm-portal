"use strict";
/**
 * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.OperatorNameColorThemeProvider = exports.OperatorNameColorTheme = exports.getOperatorNameColorThemeParams = exports.OperatorNameColorThemeParams = void 0;
var tslib_1 = require("tslib");
var color_1 = require("../../mol-util/color");
var structure_1 = require("../../mol-model/structure");
var param_definition_1 = require("../../mol-util/param-definition");
var palette_1 = require("../../mol-util/color/palette");
var categories_1 = require("./categories");
var DefaultList = 'many-distinct';
var DefaultColor = (0, color_1.Color)(0xCCCCCC);
var Description = "Assigns a color based on the operator name of a transformed chain.";
exports.OperatorNameColorThemeParams = tslib_1.__assign({}, (0, palette_1.getPaletteParams)({ type: 'colors', colorList: DefaultList }));
function getOperatorNameColorThemeParams(ctx) {
    var params = param_definition_1.ParamDefinition.clone(exports.OperatorNameColorThemeParams);
    return params;
}
exports.getOperatorNameColorThemeParams = getOperatorNameColorThemeParams;
function getOperatorNameSerialMap(structure) {
    var map = new Map();
    for (var i = 0, il = structure.units.length; i < il; ++i) {
        var name_1 = structure.units[i].conformation.operator.name;
        if (!map.has(name_1))
            map.set(name_1, map.size);
    }
    return map;
}
function OperatorNameColorTheme(ctx, props) {
    var color;
    var legend;
    if (ctx.structure) {
        var operatorNameSerialMap_1 = getOperatorNameSerialMap(ctx.structure.root);
        var labelTable_1 = Array.from(operatorNameSerialMap_1.keys());
        var valueLabel = function (i) { return labelTable_1[i]; };
        var palette_2 = (0, palette_1.getPalette)(operatorNameSerialMap_1.size, props, { valueLabel: valueLabel });
        legend = palette_2.legend;
        color = function (location) {
            var serial = undefined;
            if (structure_1.StructureElement.Location.is(location)) {
                var name_2 = location.unit.conformation.operator.name;
                serial = operatorNameSerialMap_1.get(name_2);
            }
            else if (structure_1.Bond.isLocation(location)) {
                var name_3 = location.aUnit.conformation.operator.name;
                serial = operatorNameSerialMap_1.get(name_3);
            }
            return serial === undefined ? DefaultColor : palette_2.color(serial);
        };
    }
    else {
        color = function () { return DefaultColor; };
    }
    return {
        factory: OperatorNameColorTheme,
        granularity: 'instance',
        color: color,
        props: props,
        description: Description,
        legend: legend
    };
}
exports.OperatorNameColorTheme = OperatorNameColorTheme;
exports.OperatorNameColorThemeProvider = {
    name: 'operator-name',
    label: 'Operator Name',
    category: categories_1.ColorThemeCategory.Symmetry,
    factory: OperatorNameColorTheme,
    getParams: getOperatorNameColorThemeParams,
    defaultValues: param_definition_1.ParamDefinition.getDefaultValues(exports.OperatorNameColorThemeParams),
    isApplicable: function (ctx) { return !!ctx.structure; }
};
