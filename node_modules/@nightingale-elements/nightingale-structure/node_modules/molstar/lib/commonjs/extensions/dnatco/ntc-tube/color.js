"use strict";
/**
 * Copyright (c) 2018-2022 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Michal Malý <michal.maly@ibt.cas.cz>
 * @author Jiří Černý <jiri.cerny@ibt.cas.cz>
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.NtCTubeColorThemeProvider = exports.NtCTubeColorTheme = exports.getNtCTubeColorThemeParams = exports.NtCTubeColorThemeParams = void 0;
var tslib_1 = require("tslib");
var color_1 = require("../color");
var property_1 = require("./property");
var types_1 = require("./types");
var property_2 = require("../property");
var color_2 = require("../../../mol-theme/color");
var color_3 = require("../../../mol-util/color");
var params_1 = require("../../../mol-util/color/params");
var param_definition_1 = require("../../../mol-util/param-definition");
var legend_1 = require("../../../mol-util/legend");
var type_helpers_1 = require("../../../mol-util/type-helpers");
var Description = 'Assigns colors to NtC Tube segments';
var NtCTubeColors = (0, color_3.ColorMap)(tslib_1.__assign(tslib_1.__assign({}, color_1.NtCColors), { residueMarker: (0, color_3.Color)(0x222222), stepBoundaryMarker: (0, color_3.Color)(0x656565) }));
exports.NtCTubeColorThemeParams = {
    colors: param_definition_1.ParamDefinition.MappedStatic('default', {
        'default': param_definition_1.ParamDefinition.EmptyGroup(),
        'custom': param_definition_1.ParamDefinition.Group((0, params_1.getColorMapParams)(NtCTubeColors))
    }),
    markResidueBoundaries: param_definition_1.ParamDefinition.Boolean(true),
    markSegmentBoundaries: param_definition_1.ParamDefinition.Boolean(true),
};
function getNtCTubeColorThemeParams(ctx) {
    return param_definition_1.ParamDefinition.clone(exports.NtCTubeColorThemeParams);
}
exports.getNtCTubeColorThemeParams = getNtCTubeColorThemeParams;
function NtCTubeColorTheme(ctx, props) {
    var colorMap = props.colors.name === 'default' ? NtCTubeColors : props.colors.params;
    function color(location, isSecondary) {
        var _a;
        if (types_1.NtCTubeTypes.isLocation(location)) {
            var data = location.data;
            var step = data.step, kind = data.kind;
            var key = void 0;
            if (kind === 'upper')
                key = step.NtC + '_Upr';
            else if (kind === 'lower')
                key = step.NtC + '_Lwr';
            else if (kind === 'residue-boundary')
                key = (!props.markResidueBoundaries ? step.NtC + '_Lwr' : 'residueMarker');
            else /* segment-boundary */
                key = (!props.markSegmentBoundaries ? step.NtC + '_Lwr' : 'stepBoundaryMarker');
            return (_a = colorMap[key]) !== null && _a !== void 0 ? _a : color_1.ErrorColor;
        }
        return color_1.ErrorColor;
    }
    return {
        factory: NtCTubeColorTheme,
        granularity: 'group',
        color: color,
        props: props,
        description: Description,
        legend: (0, legend_1.TableLegend)((0, type_helpers_1.ObjectKeys)(colorMap).map(function (k) { return [k.replace('_', ' '), colorMap[k]]; }).concat([['Error', color_1.ErrorColor]])),
    };
}
exports.NtCTubeColorTheme = NtCTubeColorTheme;
exports.NtCTubeColorThemeProvider = {
    name: 'ntc-tube',
    label: 'NtC Tube',
    category: color_2.ColorTheme.Category.Residue,
    factory: NtCTubeColorTheme,
    getParams: getNtCTubeColorThemeParams,
    defaultValues: param_definition_1.ParamDefinition.getDefaultValues(exports.NtCTubeColorThemeParams),
    isApplicable: function (ctx) { return !!ctx.structure && ctx.structure.models.some(function (m) { return property_2.Dnatco.isApplicable(m); }); },
    ensureCustomProperties: {
        attach: function (ctx, data) { return data.structure ? property_1.NtCTubeProvider.attach(ctx, data.structure.models[0], void 0, true) : Promise.resolve(); },
        detach: function (data) { return data.structure && property_1.NtCTubeProvider.ref(data.structure.models[0], false); }
    }
};
