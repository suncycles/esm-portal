"use strict";
/**
 * Copyright (c) 2020 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author David Sehnal <david.sehnal@gmail.com>
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DxFormat = exports.volumeFromDx = void 0;
var tslib_1 = require("tslib");
var linear_algebra_1 = require("../../mol-math/linear-algebra");
var mol_task_1 = require("../../mol-task");
var array_1 = require("../../mol-util/array");
var custom_property_1 = require("../../mol-model/custom-property");
function volumeFromDx(source, params) {
    var _this = this;
    return mol_task_1.Task.create('Create Volume', function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
        var header, values, space, data, matrix, basis;
        return tslib_1.__generator(this, function (_a) {
            header = source.header, values = source.values;
            space = linear_algebra_1.Tensor.Space(header.dim, [0, 1, 2], Float64Array);
            data = linear_algebra_1.Tensor.create(space, linear_algebra_1.Tensor.Data1(values));
            matrix = linear_algebra_1.Mat4.fromTranslation((0, linear_algebra_1.Mat4)(), header.min);
            basis = linear_algebra_1.Mat4.fromScaling((0, linear_algebra_1.Mat4)(), header.h);
            linear_algebra_1.Mat4.mul(matrix, matrix, basis);
            return [2 /*return*/, {
                    label: params === null || params === void 0 ? void 0 : params.label,
                    entryId: params === null || params === void 0 ? void 0 : params.entryId,
                    grid: {
                        transform: { kind: 'matrix', matrix: matrix },
                        cells: data,
                        stats: {
                            min: (0, array_1.arrayMin)(values),
                            max: (0, array_1.arrayMax)(values),
                            mean: (0, array_1.arrayMean)(values),
                            sigma: (0, array_1.arrayRms)(values)
                        },
                    },
                    sourceData: DxFormat.create(source),
                    customProperties: new custom_property_1.CustomProperties(),
                    _propertyData: Object.create(null),
                }];
        });
    }); });
}
exports.volumeFromDx = volumeFromDx;
var DxFormat;
(function (DxFormat) {
    function is(x) {
        return (x === null || x === void 0 ? void 0 : x.kind) === 'dx';
    }
    DxFormat.is = is;
    function create(dx) {
        return { kind: 'dx', name: dx.name, data: dx };
    }
    DxFormat.create = create;
})(DxFormat || (DxFormat = {}));
exports.DxFormat = DxFormat;
