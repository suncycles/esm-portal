"use strict";
/**
 * Copyright (c) 2020 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author David Sehnal <david.sehnal@gmail.com>
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.trajectoryFromCube = void 0;
var tslib_1 = require("tslib");
var db_1 = require("../../mol-data/db");
var types_1 = require("../../mol-model/structure/model/types");
var mol_task_1 = require("../../mol-task");
var parser_1 = require("./basic/parser");
var schema_1 = require("./basic/schema");
var component_1 = require("./common/component");
var entity_1 = require("./common/entity");
function getModels(cube, ctx) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var atoms, MOL, A, type_symbol, seq_id, atom_site, entityBuilder, componentBuilder, basic;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    atoms = cube.atoms;
                    MOL = db_1.Column.ofConst('MOL', cube.atoms.count, db_1.Column.Schema.str);
                    A = db_1.Column.ofConst('A', cube.atoms.count, db_1.Column.Schema.str);
                    type_symbol = db_1.Column.ofArray({ array: db_1.Column.mapToArray(atoms.number, function (n) { return (0, types_1.getElementFromAtomicNumber)(n); }), schema: db_1.Column.Schema.Aliased(db_1.Column.Schema.str) });
                    seq_id = db_1.Column.ofConst(1, atoms.count, db_1.Column.Schema.int);
                    atom_site = db_1.Table.ofPartialColumns(schema_1.BasicSchema.atom_site, {
                        auth_asym_id: A,
                        auth_atom_id: type_symbol,
                        auth_comp_id: MOL,
                        auth_seq_id: seq_id,
                        Cartn_x: db_1.Column.asArrayColumn(atoms.x, Float32Array),
                        Cartn_y: db_1.Column.asArrayColumn(atoms.y, Float32Array),
                        Cartn_z: db_1.Column.asArrayColumn(atoms.z, Float32Array),
                        id: db_1.Column.range(0, atoms.count - 1),
                        label_asym_id: A,
                        label_atom_id: type_symbol,
                        label_comp_id: MOL,
                        label_seq_id: seq_id,
                        label_entity_id: db_1.Column.ofConst('1', atoms.count, db_1.Column.Schema.str),
                        occupancy: db_1.Column.ofConst(1, atoms.count, db_1.Column.Schema.float),
                        type_symbol: type_symbol,
                        pdbx_PDB_model_num: db_1.Column.ofConst(1, atoms.count, db_1.Column.Schema.int),
                    }, atoms.count);
                    entityBuilder = new entity_1.EntityBuilder();
                    entityBuilder.setNames([['MOL', 'Unknown Entity']]);
                    entityBuilder.getEntityId('MOL', 0 /* MoleculeType.Unknown */, 'A');
                    componentBuilder = new component_1.ComponentBuilder(seq_id, type_symbol);
                    componentBuilder.setNames([['MOL', 'Unknown Molecule']]);
                    componentBuilder.add('MOL', 0);
                    basic = (0, schema_1.createBasic)({
                        entity: entityBuilder.getEntityTable(),
                        chem_comp: componentBuilder.getChemCompTable(),
                        atom_site: atom_site
                    });
                    return [4 /*yield*/, (0, parser_1.createModels)(basic, MolFormat.create(cube), ctx)];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
var MolFormat;
(function (MolFormat) {
    function is(x) {
        return (x === null || x === void 0 ? void 0 : x.kind) === 'cube';
    }
    MolFormat.is = is;
    function create(cube) {
        return { kind: 'cube', name: cube.header.comment1, data: cube };
    }
    MolFormat.create = create;
})(MolFormat || (MolFormat = {}));
function trajectoryFromCube(cube) {
    return mol_task_1.Task.create('Parse Cube', function (ctx) { return getModels(cube, ctx); });
}
exports.trajectoryFromCube = trajectoryFromCube;
