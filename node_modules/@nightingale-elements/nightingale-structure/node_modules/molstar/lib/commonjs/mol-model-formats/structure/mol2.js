"use strict";
/**
 * Copyright (c) 2020-2022 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.trajectoryFromMol2 = exports.Mol2Format = void 0;
var tslib_1 = require("tslib");
var db_1 = require("../../mol-data/db");
var mol_task_1 = require("../../mol-task");
var parser_1 = require("./basic/parser");
var schema_1 = require("./basic/schema");
var component_1 = require("./common/component");
var entity_1 = require("./common/entity");
var index_pair_1 = require("./property/bonds/index-pair");
var partial_charge_1 = require("./property/partial-charge");
var structure_1 = require("../../mol-model/structure");
var util_1 = require("./util");
var symmetry_1 = require("./property/symmetry");
var geometry_1 = require("../../mol-math/geometry");
var linear_algebra_1 = require("../../mol-math/linear-algebra");
function getModels(mol2, ctx) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var models, i, il, _a, molecule, atoms, bonds, crysin, A, type_symbol, hasAtomType, i_1, i_2, atom_site, entityBuilder, componentBuilder, i_3, il_1, basic, _models, indexA, indexB, key, order, flag, pairBonds, first, symmetry;
        return tslib_1.__generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    models = [];
                    i = 0, il = mol2.structures.length;
                    _b.label = 1;
                case 1:
                    if (!(i < il)) return [3 /*break*/, 4];
                    _a = mol2.structures[i], molecule = _a.molecule, atoms = _a.atoms, bonds = _a.bonds, crysin = _a.crysin;
                    A = db_1.Column.ofConst('A', atoms.count, db_1.Column.Schema.str);
                    type_symbol = new Array(atoms.count);
                    hasAtomType = false;
                    for (i_1 = 0; i_1 < atoms.count; ++i_1) {
                        if (atoms.atom_type.value(i_1).includes('.')) {
                            hasAtomType = true;
                            break;
                        }
                    }
                    for (i_2 = 0; i_2 < atoms.count; ++i_2) {
                        type_symbol[i_2] = hasAtomType
                            ? atoms.atom_type.value(i_2).split('.')[0].toUpperCase()
                            : (0, util_1.guessElementSymbolString)(atoms.atom_name.value(i_2), atoms.subst_name.value(i_2));
                    }
                    atom_site = db_1.Table.ofPartialColumns(schema_1.BasicSchema.atom_site, {
                        auth_asym_id: A,
                        auth_atom_id: db_1.Column.asArrayColumn(atoms.atom_name),
                        auth_comp_id: atoms.subst_name,
                        auth_seq_id: atoms.subst_id,
                        Cartn_x: db_1.Column.asArrayColumn(atoms.x, Float32Array),
                        Cartn_y: db_1.Column.asArrayColumn(atoms.y, Float32Array),
                        Cartn_z: db_1.Column.asArrayColumn(atoms.z, Float32Array),
                        id: db_1.Column.asArrayColumn(atoms.atom_id),
                        label_asym_id: A,
                        label_atom_id: db_1.Column.asArrayColumn(atoms.atom_name),
                        label_comp_id: atoms.subst_name,
                        label_seq_id: atoms.subst_id,
                        label_entity_id: db_1.Column.ofConst('1', atoms.count, db_1.Column.Schema.str),
                        occupancy: db_1.Column.ofConst(1, atoms.count, db_1.Column.Schema.float),
                        type_symbol: db_1.Column.ofStringArray(type_symbol),
                        pdbx_PDB_model_num: db_1.Column.ofConst(i, atoms.count, db_1.Column.Schema.int),
                    }, atoms.count);
                    entityBuilder = new entity_1.EntityBuilder();
                    entityBuilder.setNames([['MOL', molecule.mol_name || 'Unknown Entity']]);
                    entityBuilder.getEntityId('MOL', 0 /* MoleculeType.Unknown */, 'A');
                    componentBuilder = new component_1.ComponentBuilder(atoms.subst_id, atoms.atom_name);
                    for (i_3 = 0, il_1 = atoms.subst_name.rowCount; i_3 < il_1; ++i_3) {
                        componentBuilder.add(atoms.subst_name.value(i_3), i_3);
                    }
                    basic = (0, schema_1.createBasic)({
                        entity: entityBuilder.getEntityTable(),
                        chem_comp: componentBuilder.getChemCompTable(),
                        atom_site: atom_site
                    });
                    return [4 /*yield*/, (0, parser_1.createModels)(basic, Mol2Format.create(mol2), ctx)];
                case 2:
                    _models = _b.sent();
                    if (_models.frameCount > 0) {
                        indexA = db_1.Column.ofIntArray(db_1.Column.mapToArray(bonds.origin_atom_id, function (x) { return x - 1; }, Int32Array));
                        indexB = db_1.Column.ofIntArray(db_1.Column.mapToArray(bonds.target_atom_id, function (x) { return x - 1; }, Int32Array));
                        key = bonds.bond_id;
                        order = db_1.Column.ofIntArray(db_1.Column.mapToArray(bonds.bond_type, function (x) {
                            switch (x) {
                                case 'ar': // aromatic
                                case 'am': // amide
                                case 'un': // unknown
                                    return 1;
                                case 'du': // dummy
                                case 'nc': // not connected
                                    return 0;
                                default:
                                    return parseInt(x);
                            }
                        }, Int8Array));
                        flag = db_1.Column.ofIntArray(db_1.Column.mapToArray(bonds.bond_type, function (x) {
                            switch (x) {
                                case 'ar': // aromatic
                                case 'am': // amide
                                    return 16 /* BondType.Flag.Aromatic */ | 1 /* BondType.Flag.Covalent */;
                                case 'du': // dummy
                                case 'nc': // not connected
                                    return 0 /* BondType.Flag.None */;
                                case 'un': // unknown
                                default:
                                    return 1 /* BondType.Flag.Covalent */;
                            }
                        }, Int8Array));
                        pairBonds = index_pair_1.IndexPairBonds.fromData({ pairs: { key: key, indexA: indexA, indexB: indexB, order: order, flag: flag }, count: atoms.count }, { maxDistance: crysin ? -1 : Infinity });
                        first = _models.representative;
                        index_pair_1.IndexPairBonds.Provider.set(first, pairBonds);
                        partial_charge_1.AtomPartialCharge.Provider.set(first, {
                            data: atoms.charge,
                            type: molecule.charge_type
                        });
                        if (crysin) {
                            symmetry = getSymmetry(crysin);
                            if (symmetry)
                                symmetry_1.ModelSymmetry.Provider.set(first, symmetry);
                        }
                        models.push(first);
                    }
                    _b.label = 3;
                case 3:
                    ++i;
                    return [3 /*break*/, 1];
                case 4: return [2 /*return*/, new structure_1.ArrayTrajectory(models)];
            }
        });
    });
}
function getSymmetry(crysin) {
    // TODO handle `crysin.setting`
    if (crysin.setting !== 1)
        return;
    var spaceCell = geometry_1.SpacegroupCell.create(crysin.spaceGroup, linear_algebra_1.Vec3.create(crysin.a, crysin.b, crysin.c), linear_algebra_1.Vec3.scale((0, linear_algebra_1.Vec3)(), linear_algebra_1.Vec3.create(crysin.alpha, crysin.beta, crysin.gamma), Math.PI / 180));
    return {
        spacegroup: geometry_1.Spacegroup.create(spaceCell),
        assemblies: [],
        isNonStandardCrystalFrame: false,
        ncsOperators: []
    };
}
var Mol2Format;
(function (Mol2Format) {
    function is(x) {
        return (x === null || x === void 0 ? void 0 : x.kind) === 'mol2';
    }
    Mol2Format.is = is;
    function create(mol2) {
        return { kind: 'mol2', name: mol2.name, data: mol2 };
    }
    Mol2Format.create = create;
})(Mol2Format || (Mol2Format = {}));
exports.Mol2Format = Mol2Format;
function trajectoryFromMol2(mol2) {
    return mol_task_1.Task.create('Parse MOL2', function (ctx) { return getModels(mol2, ctx); });
}
exports.trajectoryFromMol2 = trajectoryFromMol2;
