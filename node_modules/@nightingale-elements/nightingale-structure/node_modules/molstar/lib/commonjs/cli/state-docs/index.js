#!/usr/bin/env node
"use strict";
/**
 * Copyright (c) 2018 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author David Sehnal <david.sehnal@gmail.com>
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var _ = tslib_1.__importStar(require("../../mol-plugin-state/transforms"));
var mol_state_1 = require("../../mol-state");
var mol_util_1 = require("../../mol-util");
var fs = tslib_1.__importStar(require("fs"));
var pd_to_md_1 = require("./pd-to-md");
var context_1 = require("../../mol-plugin/context");
var param_definition_1 = require("../../mol-util/param-definition");
// force the transform to be evaluated
_.StateTransforms.Data.Download.id;
// Empty plugin context
var ctx = new context_1.PluginContext({
    behaviors: []
});
var builder = mol_util_1.StringBuilder.create();
function typeToString(o) {
    if (o.length === 0)
        return '()';
    return o.map(function (o) { return o.name; }).join(' | ');
}
function writeTransformer(t) {
    mol_util_1.StringBuilder.write(builder, "## <a name=\"".concat(t.id.replace('.', '-'), "\"></a>").concat(t.id, " :: ").concat(typeToString(t.definition.from), " -> ").concat(typeToString(t.definition.to)));
    mol_util_1.StringBuilder.newline(builder);
    if (t.definition.display.description) {
        mol_util_1.StringBuilder.write(builder, "*".concat(t.definition.display.description, "*"));
        mol_util_1.StringBuilder.newline(builder);
    }
    mol_util_1.StringBuilder.newline(builder);
    if (t.definition.params) {
        var params = t.definition.params(void 0, ctx);
        mol_util_1.StringBuilder.write(builder, "### Parameters");
        mol_util_1.StringBuilder.newline(builder);
        mol_util_1.StringBuilder.write(builder, (0, pd_to_md_1.paramsToMd)(params));
        mol_util_1.StringBuilder.newline(builder);
        mol_util_1.StringBuilder.write(builder, "### Default Parameters");
        mol_util_1.StringBuilder.newline(builder);
        mol_util_1.StringBuilder.write(builder, "```js\n".concat(JSON.stringify(param_definition_1.ParamDefinition.getDefaultValues(params), null, 2), "\n```"));
        mol_util_1.StringBuilder.newline(builder);
    }
    mol_util_1.StringBuilder.write(builder, '----------------------------');
    mol_util_1.StringBuilder.newline(builder);
}
var transformers = mol_state_1.StateTransformer.getAll();
mol_util_1.StringBuilder.write(builder, '# Mol* Plugin State Transformer Reference');
mol_util_1.StringBuilder.newline(builder);
mol_util_1.StringBuilder.newline(builder);
transformers.forEach(function (t) {
    mol_util_1.StringBuilder.write(builder, "* [".concat(t.id, "](#").concat(t.id.replace('.', '-'), ")"));
    mol_util_1.StringBuilder.newline(builder);
});
mol_util_1.StringBuilder.newline(builder);
mol_util_1.StringBuilder.write(builder, '----------------------------');
mol_util_1.StringBuilder.newline(builder);
transformers.forEach(function (t) { return writeTransformer(t); });
fs.writeFileSync("docs/state/transforms.md", mol_util_1.StringBuilder.getString(builder));
